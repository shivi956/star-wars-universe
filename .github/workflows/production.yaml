name: Vercel Production Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main

jobs:
  Test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - run: npm install
        name: Run Test and generate coverage
      - run: |
          npm run test:cov
          COVERAGE=$(grep -oP '(\d+\.\d+)%' ./coverage/lcov-report/index.html | head -n 1 | tr -d '%')
          echo "Test Coverage: $COVERAGE%"

      - name: Check coverage and trigger build if above 90%
        if: ${{ env.COVERAGE && fromJson(env.COVERAGE) > 90 }}
        run: echo "Coverage is above 80%, proceeding with build."

  E2E:
    needs: [Test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm install
      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          project: ./e2e-testing
          start: npm run dev
          browser: chrome
          wait-on: 'http://localhost:5173/'

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: ./e2e-testing/cypress/screenshots

  Deploy-Production:
    needs: [E2E]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
